name: Version and Publish Extension + Webapp

on:
  push:
    branches:
      - main
      - vite-v4-upgrade
  workflow_dispatch:

jobs:
  release:
    name: Release Extension and Webapp
    env:
      GITHUB_TOKEN: ${{ github.token }}
      YARN_TOKEN: ${{ secrets.YARN_TOKEN }}
      CHROME_EXTENSION_ID: ${{ secrets.CHROME_EXTENSION_ID }}
      CHROME_CLIENT_ID: ${{ secrets.CHROME_CLIENT_ID }}
      CHROME_CLIENT_SECRET: ${{ secrets.CHROME_CLIENT_SECRET }}
      CHROME_REFRESH_TOKEN: ${{ secrets.CHROME_REFRESH_TOKEN }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
      MEXIT_CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.MEXIT_CLOUDFRONT_DISTRIBUTION_ID }}

    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Setup Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: 16.x

      - name: Install Yarn Globally
        run: npm install -g yarn

      - name: Install changesets CLI
        run: yarn install --dev @changesets/cli

      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1

      - uses: aws-actions/configure-aws-credentials@v1
        if: steps.changesets.outputs.hasChangesets == 'false'
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Dependencies
        run: yarn install --network-timeout 1000000 --frozen-lockfile --prefer-offline

      - name: Get Package Version
        id: get_package_version
        run: |
          content=`cat ./apps/extension/package.json`
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=packageJson::$content"

      - name: Publish Webapp
        if: steps.changesets.outputs.hasChangesets == 'false'
        run: |
          yarn nx build:staging webapp
          aws s3 sync ./dist/webapp s3://mexit-monorepo-webapp
          aws cloudfront create-invalidation --distribution-id $MEXIT_CLOUDFRONT_DISTRIBUTION_ID --paths '/*'

      - name: Build Extension for release
        if: steps.changesets.outputs.hasChangesets == 'false'
        run: yarn nx build:release extension

      - name: Zip Extension Bundle
        if: steps.changesets.outputs.hasChangesets == 'false'
        working-directory: ./dist/extension
        run: zip -r mexit-${{ fromJson(steps.get_package_version.outputs.packageJson).version }}.zip *

      - name: Create Release and Upload Extension ZIP Bundle
        id: upload-release-asset
        if: steps.changesets.outputs.hasChangesets == 'false'
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          tag_name: ${{ fromJson(steps.get_package_version.outputs.packageJson).version }}
          files: |
            dist/extension/*.zip

      - name: Upload Zip to Chrome Store
        if: steps.changesets.outputs.hasChangesets == 'false'
        run: node apps/extension/build/actions/upload-extension.mjs

      - name: Send Message to Slack with Zip
        if: steps.changesets.outputs.hasChangesets == 'false'
        run: node apps/extension/build/actions/slack-message.mjs
